# Soliguide: Useful information for those who need it
#
# SPDX-FileCopyrightText: Â© 2024 Solinum
#
# SPDX-License-Identifier: AGPL-3.0-only
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
name: _Format, lint, build and test

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-build-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  affected_packages:
    uses: ./.github/workflows/pr-get-affected-packages.yml

  build-base:
    name: Build base container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.to_build != '[]' }}
    uses: ./.github/workflows/_build-container-image.yml
    needs:
      - affected_packages
    with:
      image_name: ${{ github.repository }}/base
      dockerfile: Dockerfile
      tag_suffix1: -base
      target1: base
      tag_suffix2: ""
      target2: deps

  build-common:
    name: Build common container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'common') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/common
      dockerfile: ./packages/common/Dockerfile
      build_args: |
        BASE_IMAGE=${{ fromJSON(needs.build-base.outputs.tags2)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'common') }}
    needs:
      - affected_packages
      - build-base

  build-common-angular:
    name: Build common Angular container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'common-angular') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/common-angular
      dockerfile: ./packages/common-angular/Dockerfile
      build_args: |
        COMMON_IMAGE=${{ fromJSON(needs.build-common.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'common-angular') }}
    needs:
      - affected_packages
      - build-common

  build-design-system:
    name: Build design system container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'design-system') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/design-system
      dockerfile: ./packages/design-system/Dockerfile
      build_args: |
        BASE_IMAGE=${{ fromJSON(needs.build-base.outputs.tags2)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'design-system') }}
    needs:
      - affected_packages
      - build-base

  build-api:
    name: Build API container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'api') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/api
      dockerfile: ./packages/api/Dockerfile
      build_production: true
      build_args: |
        BASE_IMAGE=${{ fromJSON(needs.build-base.outputs.tags1)[0] }}
        COMMON_IMAGE=${{ fromJSON(needs.build-common.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'api') }}
    needs:
      - affected_packages
      - build-base
      - build-common

  build-frontend:
    name: Build frontend container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'frontend') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/frontend
      dockerfile: ./packages/frontend/Dockerfile
      build_production: true
      build_args: |
        COMMON_ANGULAR_IMAGE=${{ fromJSON(needs.build-common-angular.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'frontend') }}
    needs:
      - affected_packages
      - build-common-angular

  build-location-api:
    name: Build location API container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'location-api') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/location-api
      dockerfile: ./packages/location-api/Dockerfile
      build_production: true
      build_args: |
        BASE_IMAGE=${{ fromJSON(needs.build-base.outputs.tags1)[0] }}
        COMMON_IMAGE=${{ fromJSON(needs.build-common.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'location-api') }}
    needs:
      - affected_packages
      - build-base
      - build-common

  build-maintenance:
    name: Build maintenance container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'maintenance') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/maintenance
      dockerfile: ./packages/maintenance/Dockerfile
      tag_suffix1: -frontend
      target1: frontend
      tag_suffix2: -widget
      target2: widget
    needs:
      - affected_packages

  build-soligare:
    name: Build Soligare container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'soligare') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/soligare
      dockerfile: ./packages/soligare/Dockerfile
      build_production: true
      build_args: |
        BASE_IMAGE=${{ fromJSON(needs.build-base.outputs.tags1)[0] }}
        COMMON_IMAGE=${{ fromJSON(needs.build-common.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'soligare') }}
    needs:
      - affected_packages
      - build-base
      - build-common

  build-web-app:
    name: Build web app container image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'web-app') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/web-app
      dockerfile: ./packages/web-app/Dockerfile
      build_production: true
      build_args: |
        BASE_IMAGE=${{ fromJSON(needs.build-base.outputs.tags1)[0] }}
        COMMON_IMAGE=${{ fromJSON(needs.build-common.outputs.tags1)[0] }}
        DESIGN_SYSTEM_IMAGE=${{ fromJSON(needs.build-design-system.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'web-app') }}
    needs:
      - affected_packages
      - build-base
      - build-common
      - build-design-system

  build-widget:
    name: Build widget image
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_build, 'widget') }}
    uses: ./.github/workflows/_build-container-image.yml
    with:
      image_name: ${{ github.repository }}/widget
      dockerfile: ./packages/widget/Dockerfile
      build_production: true
      build_args: |
        COMMON_ANGULAR_IMAGE=${{ fromJSON(needs.build-common-angular.outputs.tags1)[0] }}
      build_target2: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'widget') }}
    needs:
      - affected_packages
      - build-common-angular

  update_qovery_environment:
    name: Update Qovery environment with new tags
    # FIXME develop
    if: ${{ (startsWith(github.ref, 'refs/pull/') || github.ref == 'refs/heads/ci-demo') && always() }}
    uses: ./.github/workflows/_deploy-to-test-qovery.yml
    with:
      deploy_api: ${{ contains(needs.affected_packages.outputs.to_deploy, 'api') }}
      deploy_design-system: ${{ contains(needs.affected_packages.outputs.to_deploy, 'design-system') }}
      deploy_frontend: ${{ contains(needs.affected_packages.outputs.to_deploy, 'frontend') }}
      deploy_location-api: ${{ contains(needs.affected_packages.outputs.to_deploy, 'location-api') }}
      deploy_soligare: ${{ contains(needs.affected_packages.outputs.to_deploy, 'soligare') }}
      deploy_web-app: ${{ contains(needs.affected_packages.outputs.to_deploy, 'web-app') }}
      deploy_widget: ${{ contains(needs.affected_packages.outputs.to_deploy, 'widget') }}
      # FIXME develop
      create: ${{ github.ref == 'refs/heads/ci-demo' }}
    needs:
      - affected_packages
      - build-api
      - build-design-system
      - build-frontend
      - build-location-api
      - build-maintenance
      - build-soligare
      - build-web-app
      - build-widget
    secrets: inherit

  test-api:
    name: Test API
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'api') }}
    needs:
      - affected_packages
      - build-api
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    env:
      MONGODB_URI: mongodb://127.0.0.1:27017/soliguide_test?replicaSet=rs0
      TEST_API_IMAGE: ${{ fromJSON(needs.build-api.outputs.tags2)[0] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start MinIO and MongoDB
        run: docker compose up -d minio mongodb typesense

      - name: Pull test image
        run: docker pull "$TEST_API_IMAGE"

      - name: Prettier cache
        uses: actions/cache@v4
        with:
          path: packages/api/node_modules/.cache/prettier
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-api-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-api-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-api-

      - name: Format check
        run: |
          docker run --pull always \
            -v ./packages/api/node_modules/.cache/prettier:/app/packages/api/node_modules/.cache/prettier \
            "$TEST_API_IMAGE" \
            yarn workspace @soliguide/api format

      - name: Eslint cache
        uses: actions/cache@v4
        with:
          path: packages/api/.eslintcache
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-api-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-api-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-api-

      - name: Lint
        run: |
          docker run \
            -v ./packages/api/.eslintcache:/app/packages/api/.eslintcache \
            "$TEST_API_IMAGE" \
            yarn workspace @soliguide/api lint

      - name: Wait for Mongo to be ready
        timeout-minutes: 5
        run: |
          while [ "$(docker inspect --format='{{json .State.Health.Status}}' soliguide-mongodb-1)" != '"healthy"' ]; do
            echo "Mongodb is not yet ready to accept connections"&>2
            sleep 3s
          done

      - name: Restore API test data
        run: ./packages/api/db.sh restore -tm full

      - name: Migrate Mongo schema and test
        run: |
          docker run \
            -v ./packages/api/coverage:/app/packages/api/coverage/ \
            -e ENV=CI \
            --network host \
            "$TEST_API_IMAGE" \
            sh -c 'yarn workspace @soliguide/api migrate-up && yarn workspace @soliguide/api test --coverage'

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-api
          path: ./packages/api/coverage/cobertura-coverage.xml
          if-no-files-found: error
          retention-days: 1

  test-common:
    name: Test common
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'common') }}
    needs:
      - affected_packages
      - build-common
    uses: ./.github/workflows/_test-package.yml
    with:
      package: common
      container_image: ${{ fromJSON(needs.build-common.outputs.tags2)[0] }}

  test-common-angular:
    name: Test common Angular
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'common-angular') }}
    needs:
      - affected_packages
      - build-common-angular
    uses: ./.github/workflows/_test-package.yml
    with:
      package: common-angular
      container_image: ${{ fromJSON(needs.build-common-angular.outputs.tags2)[0] }}

  test-design-system:
    name: Test design system
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'design-system') }}
    needs:
      - affected_packages
      - build-design-system
    uses: ./.github/workflows/_test-package.yml
    with:
      package: design-system
      container_image: ${{ fromJSON(needs.build-design-system.outputs.tags2)[0] }}

  test-frontend:
    name: Test frontend
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'frontend') }}
    needs:
      - affected_packages
      - build-frontend
    uses: ./.github/workflows/_test-package.yml
    with:
      package: frontend
      container_image: ${{ fromJSON(needs.build-frontend.outputs.tags2)[0] }}

  test-location-api:
    name: Test location API
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'location-api') }}
    needs:
      - affected_packages
      - build-location-api
    runs-on: ubuntu-latest
    container:
      image: ${{ fromJSON(needs.build-location-api.outputs.tags2)[0] }}
    permissions:
      packages: read
    defaults:
      run:
        working-directory: /app
    steps:
      - name: Prettier cache
        uses: actions/cache@v4
        with:
          path: packages/location-api/node_modules/.cache/prettier
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-location-api-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-location-api-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-location-api-

      - name: Format check
        run: yarn workspace @soliguide/location-api format

      - name: Eslint cache
        uses: actions/cache@v4
        with:
          path: packages/location-api/.eslintcache
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-location-api-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-location-api-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-location-api-

      - name: Lint
        run: yarn workspace @soliguide/location-api lint

      - name: Test
        run: yarn workspace @soliguide/location-api test --coverage
        env:
          HERE_API_KEY: ${{ secrets.HERE_API_KEY }}

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-location-api
          path: /app/packages/location-api/coverage/cobertura-coverage.xml
          if-no-files-found: error
          retention-days: 1

  test-maintenance-frontend:
    name: Test maintenance frontend
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'maintenance') }}
    defaults:
      run:
        working-directory: /etc/caddy/
    needs:
      - affected_packages
      - build-maintenance
    runs-on: ubuntu-latest
    container:
      image: ${{ fromJSON(needs.build-maintenance.outputs.tags1)[0] }}
    permissions:
      packages: read
    steps:
      - name: Validate Caddy configuration
        run: caddy validate
        env:
          ANGULAR_FRONTEND_PROXY_URL: http://localhost:8080
          WEB_APP_PROXY_URL: http://localhost:8081
          WEB_APP_DOMAIN_REDIRECT_MOBILE: http://localhost:8081

  test-maintenance-widget:
    name: Test maintenance widget
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'maintenance') }}
    defaults:
      run:
        working-directory: /etc/caddy/
    needs:
      - affected_packages
      - build-maintenance
    runs-on: ubuntu-latest
    container:
      image: ${{ fromJSON(needs.build-maintenance.outputs.tags2)[0] }}
    permissions:
      packages: read
    steps:
      - name: Validate Caddy configuration
        run: caddy validate
        env:
          ANGULAR_FRONTEND_PROXY_URL: http://localhost:8080

  test-soligare:
    name: Test soligare
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'soligare') }}
    needs:
      - affected_packages
      - build-soligare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    env:
      TEST_SOLIGARE_IMAGE: ${{ fromJSON(needs.build-soligare.outputs.tags2)[0] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start postgres
        run: docker compose up -d postgres

      - name: Prettier cache
        uses: actions/cache@v4
        with:
          path: packages/soligare/node_modules/.cache/prettier
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-soligare-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-soligare-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-soligare-

      - name: Format check
        run: |
          docker run --pull always \
            -v ./packages/soligare/node_modules/.cache/prettier:/app/packages/soligare/node_modules/.cache/prettier \
            "$TEST_SOLIGARE_IMAGE" \
            yarn workspace @soliguide/soligare format

      - name: Eslint cache
        uses: actions/cache@v4
        with:
          path: packages/soligare/.eslintcache
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-soligare-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-soligare-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-soligare-

      - name: Lint
        run: |
          docker run \
            -v ./packages/soligare/.eslintcache:/app/packages/soligare/.eslintcache \
            "$TEST_SOLIGARE_IMAGE" \
            yarn workspace @soliguide/soligare lint

      - name: Wait for Postgres to be ready
        timeout-minutes: 5
        run: |
          while [ "$(docker inspect --format='{{json .State.Health.Status}}' soligare-postgres)" != '"healthy"' ]; do
            echo "PostgreSQL is not yet ready to accept connections"&>2
            sleep 3s
          done

      - name: Restore PostgreSQL test database
        run: ./scripts/restore-soligare-db.sh --db=test
        env:
          POSTGRES_EXTERNAL_URI: postgres://postgres:postgres@127.0.0.1:5432/postgres

      - name: Test
        run: |
          docker run \
            -v ./packages/soligare/coverage/:/app/packages/soligare/coverage/ \
            -e POSTGRES_EXTERNAL_URI=${POSTGRES_EXTERNAL_URI} \
            --network soliguide_default \
            "$TEST_SOLIGARE_IMAGE" \
            yarn workspace @soliguide/soligare test --coverage
        env:
          POSTGRES_EXTERNAL_URI: postgres://postgres:postgres@postgres:5432/postgres

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-soligare
          path: ./packages/soligare/coverage/cobertura-coverage.xml
          if-no-files-found: error
          retention-days: 1

  test-web-app:
    name: Test web app
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'web-app') }}
    needs:
      - affected_packages
      - build-web-app
    runs-on: ubuntu-latest
    container:
      image: ${{ fromJSON(needs.build-web-app.outputs.tags2)[0] }}
    permissions:
      packages: read
    defaults:
      run:
        working-directory: /app
    steps:
      - name: Prettier cache
        uses: actions/cache@v4
        with:
          path: packages/web-app/node_modules/.cache/prettier
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-web-app-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-web-app-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-prettiercache-web-app-

      - name: Format check
        run: yarn workspace @soliguide/web-app format

      - name: Eslint cache
        uses: actions/cache@v4
        with:
          path: packages/web-app/.eslintcache
          key: ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-web-app-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-web-app-${{ github.base_ref }}
            ${{ runner.os }}-${{ needs.affected_packages.outputs.node_version }}-eslintcache-web-app-

      - name: Lint
        run: yarn workspace @soliguide/web-app lint

      - name: Unit tests
        run: yarn workspace @soliguide/web-app test:unit run --coverage

      # - name: Integration tests
      #   run: yarn workspace @soliguide/web-app test:integration
      #   env:
      #     PLAYWRIGHT_BROWSERS_PATH: /root/.cache/ms-playwright

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-web-app
          path: /app/packages/web-app/coverage/cobertura-coverage.xml
          if-no-files-found: error
          retention-days: 1

  test-widget:
    name: Test widget
    if: ${{ !startsWith(github.ref, 'refs/pull/') || contains(needs.affected_packages.outputs.to_test, 'widget') }}
    needs:
      - affected_packages
      - build-widget
    uses: ./.github/workflows/_test-package.yml
    with:
      package: widget
      container_image: ${{ fromJSON(needs.build-widget.outputs.tags2)[0] }}

  send-test-coverage:
    name: Send test coverage reports to Deepsource
    if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.to_test != '[]' && always() }}
    needs:
      - affected_packages
      - test-api
      - test-common
      - test-common-angular
      - test-design-system
      - test-frontend
      - test-location-api
      - test-soligare
      - test-web-app
      - test-widget
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Merge commit + last PR commit for PR
          fetch-depth: 2

      - name: Install Deepsource CLI
        run: curl https://deepsource.io/cli | sh
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*

      - name: Copy coverage reports to their original locations
        run: |
          set -x
          [ -d "coverage-api" ] && mkdir -p ./packages/api/coverage && cp ./coverage-api/* ./packages/api/coverage/ || echo "no api coverage"
          [ -d "coverage-common" ] && mkdir -p ./packages/common/coverage && cp ./coverage-common/* ./packages/common/coverage/ || echo "no common coverage"
          [ -d "coverage-common-angular" ] && mkdir -p ./packages/common-angular/coverage && cp ./coverage-common-angular/* ./packages/common-angular/coverage/ || echo "no common-angular coverage"
          [ -d "coverage-design-system" ] && mkdir -p ./packages/design-system/coverage && cp ./coverage-design-system/* ./packages/design-system/coverage/ || echo "no design-system coverage"
          [ -d "coverage-frontend" ] && mkdir -p ./packages/frontend/coverage && cp ./coverage-frontend/* ./packages/frontend/coverage/ || echo "no frontend coverage"
          [ -d "coverage-location-api" ] && mkdir -p ./packages/location-api/coverage && cp ./coverage-location-api/* ./packages/location-api/coverage/ || echo "no location-api coverage"
          [ -d "coverage-soligare" ] && mkdir -p ./packages/soligare/coverage && cp ./coverage-soligare/* ./packages/soligare/coverage/ || echo "no soligare coverage"
          [ -d "coverage-web-app" ] && mkdir -p ./packages/web-app/coverage && cp ./coverage-web-app/* ./packages/web-app/coverage/ || echo "no web-app coverage"
          [ -d "coverage-widget" ] && mkdir -p ./packages/widget/coverage && cp ./coverage-widget/* ./packages/widget/coverage/ || echo "no widget coverage"

      - name: Move to last PR commit instead of merge commit
        if: ${{ startsWith(github.ref, 'refs/pull/') }}
        run: git checkout ${{ github.event.pull_request.head.sha }}

      - name: Send API test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.api_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/api/coverage/cobertura-coverage.xml
      - name: Send common test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.common == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/common/coverage/cobertura-coverage.xml
      - name: Send common-angular test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.common-angular_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/common-angular/coverage/cobertura-coverage.xml
      - name: Send design-system test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.design-system == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/design-system/coverage/cobertura-coverage.xml
      - name: Send frontend test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.frontend_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/frontend/coverage/cobertura-coverage.xml
      - name: Send location-api test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.location-api_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/location-api/coverage/cobertura-coverage.xml
      - name: Send soligare test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.soligare_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/soligare/coverage/cobertura-coverage.xml
      - name: Send web-app test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.web-app_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/web-app/coverage/cobertura-coverage.xml
      - name: Send widget test coverage to Deepsource
        if: ${{ !startsWith(github.ref, 'refs/pull/') || needs.affected_packages.outputs.widget_dependencies == 'true' }}
        run: |
          ./bin/deepsource report --analyzer test-coverage --key javascript --value-file "$COVERAGE_FILE"
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
          COVERAGE_FILE: ./packages/widget/coverage/cobertura-coverage.xml

  gatekeeper:
    name: Gatekeeper
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - affected_packages
      - build-base
      - build-api
      - build-common
      - build-common-angular
      - build-design-system
      - build-frontend
      - build-location-api
      - build-maintenance
      - build-soligare
      - build-web-app
      - build-widget
      - test-api
      - test-common
      - test-common-angular
      - test-design-system
      - test-frontend
      - test-location-api
      - test-maintenance-frontend
      - test-maintenance-widget
      - test-soligare
      - test-web-app
      - test-widget
      - send-test-coverage
    steps:
      - name: Check all jobs ran for non PR refs
        if: ${{ !startsWith(github.ref, 'refs/pull/') }}
        run: |
          [[ "${{ needs.build-base.result }}" == "success" ]]
          [[ "${{ needs.build-api.result }}" == "success" ]]
          [[ "${{ needs.build-common.result }}" == "success" ]]
          [[ "${{ needs.build-common-angular.result }}" == "success" ]]
          [[ "${{ needs.build-design-system.result }}" == "success" ]]
          [[ "${{ needs.build-frontend.result }}" == "success" ]]
          [[ "${{ needs.build-location-api.result }}" == "success" ]]
          [[ "${{ needs.build-maintenance.result }}" == "success" ]]
          [[ "${{ needs.build-soligare.result }}" == "success" ]]
          [[ "${{ needs.build-web-app.result }}" == "success" ]]
          [[ "${{ needs.build-widget.result }}" == "success" ]]
          [[ "${{ needs.test-api.result }}" == "success" ]]
          [[ "${{ needs.test-common.result }}" == "success" ]]
          [[ "${{ needs.test-common-angular.result }}" == "success" ]]
          [[ "${{ needs.test-design-system.result }}" == "success" ]]
          [[ "${{ needs.test-frontend.result }}" == "success" ]]
          [[ "${{ needs.test-location-api.result }}" == "success" ]]
          [[ "${{ needs.test-maintenance-frontend.result }}" == "success" ]]
          [[ "${{ needs.test-maintenance-widget.result }}" == "success" ]]
          [[ "${{ needs.test-soligare.result }}" == "success" ]]
          [[ "${{ needs.test-web-app.result }}" == "success" ]]
          [[ "${{ needs.test-widget.result }}" == "success" ]]
          [[ "${{ needs.send-test-coverage.result }}" == "success" ]]

      - name: Check build-base
        if: ${{ startsWith(github.ref, 'refs/pull/') && needs.affected_packages.outputs.to_build != '[]' }}
        run: |
          [[ "${{ needs.build-base.result }}" == "success" ]]
      - name: Check build-api
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'api') }}
        run: |
          [[ "${{ needs.build-api.result }}" == "success" ]]
      - name: Check build-common
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'common') }}
        run: |
          [[ "${{ needs.build-common.result }}" == "success" ]]
      - name: Check build-common-angular
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'common-angular') }}
        run: |
          [[ "${{ needs.build-common-angular.result }}" == "success" ]]
      - name: Check build-design-system
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'design-system') }}
        run: |
          [[ "${{ needs.build-design-system.result }}" == "success" ]]
      - name: Check build-frontend
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'frontend') }}
        run: |
          [[ "${{ needs.build-frontend.result }}" == "success" ]]
      - name: Check build-location-api
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'location-api') }}
        run: |
          [[ "${{ needs.build-location-api.result }}" == "success" ]]
      - name: Check build-maintenance
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'maintenance') }}
        run: |
          [[ "${{ needs.build-maintenance.result }}" == "success" ]]
      - name: Check build-soligare
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'soligare') }}
        run: |
          [[ "${{ needs.build-soligare.result }}" == "success" ]]
      - name: Check build-web-app
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'web-app') }}
        run: |
          [[ "${{ needs.build-web-app.result }}" == "success" ]]
      - name: Check build-widget
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_build, 'widget') }}
        run: |
          [[ "${{ needs.build-widget.result }}" == "success" ]]
      - name: Check send-test-coverage
        if: ${{ startsWith(github.ref, 'refs/pull/') && needs.affected_packages.outputs.to_test != '[]' }}
        run: |
          [[ "${{ needs.send-test-coverage.result }}" == "success" ]]
      - name: Check test-api
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'api') }}
        run: |
          [[ "${{ needs.test-api.result }}" == "success" ]]
      - name: Check test-common
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'common') }}
        run: |
          [[ "${{ needs.test-common.result }}" == "success" ]]
      - name: Check test-common-angular
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'common-angular') }}
        run: |
          [[ "${{ needs.test-common-angular.result }}" == "success" ]]
      - name: Check test-design-system
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'design-system') }}
        run: |
          [[ "${{ needs.test-design-system.result }}" == "success" ]]
      - name: Check test-frontend
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'frontend') }}
        run: |
          [[ "${{ needs.test-frontend.result }}" == "success" ]]
      - name: Check test-location-api
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'location-api') }}
        run: |
          [[ "${{ needs.test-location-api.result }}" == "success" ]]
      - name: Check test-maintenance
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'maintenance') }}
        run: |
          [[ "${{ needs.test-maintenance-frontend.result }}" == "success" ]]
          [[ "${{ needs.test-maintenance-widget.result }}" == "success" ]]
      - name: Check test-soligare
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'soligare') }}
        run: |
          [[ "${{ needs.test-soligare.result }}" == "success" ]]
      - name: Check test-web-app
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'web-app') }}
        run: |
          [[ "${{ needs.test-web-app.result }}" == "success" ]]
      - name: Check test-widget
        if: ${{ startsWith(github.ref, 'refs/pull/') && contains(needs.affected_packages.outputs.to_test, 'widget') }}
        run: |
          [[ "${{ needs.test-widget.result }}" == "success" ]]
